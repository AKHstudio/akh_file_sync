name: Publish and Release

on:
    push:
        tags:
            - 'v*' # 例: v1.0.0 のようなタグをプッシュしたときに実行

jobs:
    get-tag:
        runs-on: ubuntu-latest
        outputs:
            TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
        steps:
            - name: タグ名を取得
              id: tag
              run: |
                  TAG_NAME=${GITHUB_REF#refs/tags/}
                  echo "TAG: ${TAG_NAME}"
                  echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_OUTPUT

    update-version:
        needs: get-tag
        runs-on: ubuntu-latest
        env:
            TAG_NAME: ${{ needs.get-tag.outputs.TAG_NAME }}
        steps:
            - name: リポジトリをチェックアウト
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.ref }}
                  token: ${{ secrets.GH_PAT }} # Push用のPAT（Personal Access Token）

            - name: release ブランチを作成
              run: |
                  git checkout -B release-${{ env.TAG_NAME }}

            - name: package.json のバージョンを更新
              run: |
                  NEW_VERSION=${TAG_NAME#v}
                  jq --indent 4 ".version = \"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json
                  echo "📦 package.json のバージョンを更新: $NEW_VERSION" 
                  cat package.json

            - name: 変更をコミット & プッシュ
              run: |
                  if [ -n "$(git diff package.json)" ]; then
                    git config --global user.name "github-actions[bot]"
                    git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
                    git add package.json
                    git commit -m "Update package.json" -m "update version to ${TAG_NAME#v}"
                    git push origin release-${{ env.TAG_NAME }}
                  else
                    echo "package.json に変更はありません 📝"
                    echo "コミットをスキップします"
                  fi

            - name: tagを削除 , ブランチを削除
              if: failure()
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
                  git push origin --delete ${{ env.TAG_NAME }}
                  echo "タグを削除しました: ${{ env.TAG_NAME }}"
                  git push origin --delete release-${{ env.TAG_NAME }}
                  echo "リリースブランチを削除しました: release-${{ env.TAG_NAME }}"
                  exit 1

    flag:
        needs: get-tag
        runs-on: ubuntu-latest
        env:
            TAG_NAME: ${{ needs.get-tag.outputs.TAG_NAME }}
        outputs:
            BETA_RC_FLAG: ${{ steps.flag.outputs.BETA_RC_FLAG }}
        steps:
            - name: タグ名を取得
              id: flag
              run: |
                  if [[ "${{ env.TAG_NAME }}" == *"beta"* ]]; then
                      echo "BETA_RC_FLAG=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ env.TAG_NAME }}" == *"rc"* ]]; then
                      echo "BETA_RC_FLAG=true" >> $GITHUB_OUTPUT
                  else
                      echo "BETA_RC_FLAG=false" >> $GITHUB_OUTPUT
                  fi

    release:
        needs: [flag, get-tag, update-version]
        runs-on: ubuntu-latest
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            TAG_NAME: ${{ needs.get-tag.outputs.TAG_NAME }}
            BETA_RC_FLAG: ${{ needs.flag.outputs.BETA_RC_FLAG }}
        steps:
            - name: リポジトリをチェックアウト
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.ref }}
                  token: ${{ secrets.GH_PAT }}

            - name: release ブランチをチェックアウト
              run: |
                  if git ls-remote --heads origin | grep "release-${{ env.TAG_NAME }}"; then
                    echo "🔄 リモートブランチが存在するため、fetch してチェックアウトします。"
                    git fetch origin release-${{ env.TAG_NAME }}
                    git checkout -b release-${{ env.TAG_NAME }} origin/release-${{ env.TAG_NAME }}
                  else
                        echo "🚀 リモートに存在しないため、新しいブランチを作成します。"
                        git checkout -B release-${{ env.TAG_NAME }}
                  fi

            - name: changelogを取得
              run: |
                  echo "./changelog/${TAG_NAME#v}.md"
                  RELEASE_NOTES=$(cat ./changelog/${TAG_NAME#v}.md)
                  echo ${RELEASE_NOTES}
                  if [ ! -e ./changelog/${TAG_NAME#v}.md ]; then
                    echo "./changelog/*にリリースノートがありません。"
                    echo "リリースノートを取得できませんでした。"
                    exit 1
                  else
                    echo "./changelog/${TAG_NAME#v}.mdからリリースノートを取得しました。"
                    echo $RELEASE_NOTES > RELEASE_NOTES.md
                    if ${{ env.BETA_RC_FLAG == 'false' }}; then
                        echo "" >> CHANGELOG.md
                        echo $RELEASE_NOTES >> CHANGELOG.md
                        echo "リリースノートを CHANGELOG.md に追加しました。"
                    fi
                  fi

            - name: 変更をコミット
              run: |
                  if [ -n "$(git diff CHANGELOG.md)" ]; then
                      git config --global user.name "github-actions[bot]"
                      git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
                      git add CHANGELOG.md
                      git commit -m "Update CHANGELOG.md" -m "Update CHANGELOG.md for ${TAG_NAME#v}"
                      git push origin main
                  else
                      echo "CHANGELOG.md に変更はありません 📝"
                      echo "コミットをスキップします"
                  fi

            - name: GitHubリリースを作成
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ env.TAG_NAME }}
                  name: 'Release ${{ env.TAG_NAME }}'
                  body_path: RELEASE_NOTES.md
                  draft: false
                  prerelease: ${{ env.BETA_RC_FLAG == 'true' }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Node.jsのセットアップ
              uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: プルリクエストを作成
              if: ${{ env.BETA_RC_FLAG == 'false' }}
              run: |
                  cd .github/actions/create-pull-requests && npm install
                  node ./dist/index.js
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_PAT }}
                  TAG_NAME: ${{ env.TAG_NAME }}

            - name: エラー発生時にリセット
              if: failure()
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
                  git push origin --delete ${{ env.TAG_NAME }}
                  echo "タグを削除しました: ${{ env.TAG_NAME }}"
                  git push origin --delete release-${{ env.TAG_NAME }}
                  echo "リリースブランチを削除しました: release-${{ env.TAG_NAME }}"
    publish:
        needs: [release, get-tag, flag]

        env:
            TAG_NAME: ${{ needs.get-tag.outputs.TAG_NAME }}
            BETA_RC_FLAG: ${{ needs.flag.outputs.BETA_RC_FLAG }}
        runs-on: ubuntu-latest
        steps:
            - name: リポジトリをチェックアウト
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.ref }}
                  token: ${{ secrets.GH_PAT }}

            - name: release ブランチをチェックアウト
              run: |
                  if git ls-remote --heads origin | grep "release-${{ env.TAG_NAME }}"; then
                    echo "🔄 リモートブランチが存在するため、fetch してチェックアウトします。"
                    git fetch origin release-${{ env.TAG_NAME }}
                    git checkout -b release-${{ env.TAG_NAME }} origin/release-${{ env.TAG_NAME }}
                  else
                        echo "🚀 リモートに存在しないため、新しいブランチを作成します。"
                        git checkout -B release-${{ env.TAG_NAME }}
                  fi

            - name: Node.jsのセットアップ
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  registry-url: 'https://registry.npmjs.org/'

            - name: 依存関係のインストール
              run: npm ci

            - name: リリースビルド
              run: npm run release

            - name: タグを判定し、適切な npm publish を実行
              if: success()
              id: flag
              run: |
                  if [[ "${{ env.TAG_NAME }}" == *"beta"* ]]; then
                      LATEST_BETA=$(npm info akhsync dist-tags.beta 2>/dev/null || echo "")

                      if [[ "$LATEST_BETA" == "${TAG_NAME#v}" ]]; then
                          echo "🚀 Beta バージョン ${TAG_NAME#v} は既に公開済みです！スキップします。"
                      else
                          echo "🚀 Beta バージョンとして公開: npm publish --tag beta"
                          npm publish --tag beta --access public
                      fi
                  elif [[ "${{ env.TAG_NAME }}" == *"rc"* ]]; then
                      LATEST_RC=$(npm info akhsync dist-tags.rc 2>/dev/null || echo "")

                      if [[ "$LATEST_RC" == "${TAG_NAME#v}" ]]; then
                          echo "🚀 Rc バージョン ${TAG_NAME#v} は既に公開済みです！スキップします。"
                      else
                          echo "🚀 Rc バージョンとして公開: npm publish --tag rc"
                          npm publish --tag rc --access public
                      fi 
                  else
                      LATEST=$(npm info akhsync dist-tags.latest 2>/dev/null || echo "")

                      if [[ "$LATEST" == "${TAG_NAME#v}" ]]; then
                          echo "🚀 バージョン ${TAG_NAME#v} は既に公開済みです！スキップします。"
                      else
                          echo "🚀 ステーブルバージョンとして公開: npm publish"
                          npm publish --access public
                      fi
                  fi
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: tagを削除 , ブランチを削除
              if: failure()
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
                  git push origin --delete ${{ env.TAG_NAME }}
                  echo "タグを削除しました: ${{ env.TAG_NAME }}"
                  git push origin --delete release-${{ env.TAG_NAME }}
                  echo "リリースブランチを削除しました: release-${{ env.TAG_NAME }}"
                  npm deprecate akhsync@${{ env.TAG_NAME }} "このバージョンは非推奨です。"
