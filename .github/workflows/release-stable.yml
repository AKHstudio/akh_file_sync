name: Release Stable

on:
    pull_request:
        types: [closed]
        branches:
            - main

jobs:
    release-stable-setup:
        if: github.event.pull_request.merged == true && github.head_ref == 'release'
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        outputs:
            version: ${{ steps.extract-version.outputs.version }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v5
              with:
                  ref: ${{ github.head_ref }}
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v6
              with:
                  node-version: '20'

            - name: Extract version from PR
              id: extract-version
              run: |
                  # PR„ÅÆ„Çø„Ç§„Éà„É´„Åæ„Åü„ÅØ„Éñ„É©„É≥„ÉÅÂêç„Åã„Çâ„Éê„Éº„Ç∏„Éß„É≥„ÇíÊäΩÂá∫
                  PR_TITLE="${{ github.event.pull_request.title }}"
                  BRANCH_NAME="${{ github.head_ref }}"

                  # „Çø„Ç§„Éà„É´„Åã„Çâ„Éê„Éº„Ç∏„Éß„É≥„ÇíÊäΩÂá∫ (‰æã: "Release v1.2.3" ‚Üí "1.2.3")
                  if [[ "$PR_TITLE" =~ [vV]?([0-9]+\.[0-9]+\.[0-9]+) ]]; then
                    VERSION="${BASH_REMATCH[1]}"
                  # „Éñ„É©„É≥„ÉÅÂêç„Åã„Çâ„Éê„Éº„Ç∏„Éß„É≥„ÇíÊäΩÂá∫ (‰æã: "release/1.2.3" ‚Üí "1.2.3")
                  elif [[ "$BRANCH_NAME" =~ release/[vV]?([0-9]+\.[0-9]+\.[0-9]+) ]]; then
                    VERSION="${BASH_REMATCH[1]}"
                  else
                    # „Éê„Éº„Ç∏„Éß„É≥„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØÊ¨°„ÅÆ„Éë„ÉÉ„ÉÅ„Éê„Éº„Ç∏„Éß„É≥„Çí‰ΩøÁî®
                    LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
                    VERSION=$(echo $LATEST_TAG | sed 's/v//' | awk -F. '{print $1"."$2"."$3+1}')
                  fi

                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "Detected version: $VERSION"

            - name: Create Release tag
              env:
                  VERSION: ${{ steps.extract-version.outputs.version }}
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"

                  git tag -a "v$VERSION" -m "v$VERSION"
                  git push origin "v$VERSION"

            - name: Update package.json version
              env:
                  VERSION: ${{ steps.extract-version.outputs.version }}
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"

                  npm version $VERSION --no-git-tag-version
                  git add package.json package-lock.json
                  git commit -m "Update package.json version to v$VERSION"
                  # 0.0.0„ÅÆÂ†¥Âêà„ÅØ„ÉÜ„Çπ„ÉàÁî®„ÅÆ„Åü„ÇÅpush„Åó„Å™„ÅÑ
                  if [ "$VERSION" == "0.0.0" ]; then
                    echo "Version is 0.0.0, skipping push"
                  else
                    git push origin ${{ github.base_ref }}
                  fi

    release-github-release:
        needs: release-stable-setup
        env:
            VERSION: ${{ needs.release-stable-setup.outputs.version }}
        runs-on: ubuntu-latest
        permissions:
            contents: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v5
              with:
                  ref: ${{ github.head_ref }}
                  fetch-depth: 0

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: v${{ env.VERSION }}
                  name: üéâ Release v${{ env.VERSION }}
                  body_path: ./changelogs/${{ env.VERSION }}.md
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    release-npm-publish:
        needs: release-stable-setup
        env:
            VERSION: ${{ needs.release-stable-setup.outputs.version }}
        runs-on: ubuntu-latest
        permissions:
            contents: write
            packages: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v5
              with:
                  ref: ${{ github.head_ref }}
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v6
              with:
                  node-version: '20'
                  registry-url: 'https://registry.npmjs.org/'

            - name: Install dependencies
              run: npm ci

            - name: Build package
              run: npm run release

            - name: Publish test to NPM (dry-run)
              id: publish-npm-dry-run
              continue-on-error: true
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: npm publish --access public --dry-run

            - name: Publish to NPM
              if: steps.publish-npm-dry-run.outcome == 'success'
              id: publish-npm
              continue-on-error: true
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: |
                  exit 0 
                  # npm publish --access public

            - name: Error if publish failed
              if: steps.publish-npm.outcome == 'failure'
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: |
                  echo "‚ùå NPM publish failed"
                  npm deprecate @akhstudio/akhsync@${{ env.VERSION }} "„Åì„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅØÈùûÊé®Â•®„Åß„Åô„ÄÇ"

    error-handling:
        needs: [release-stable-setup, release-github-release, release-npm-publish]
        if: failure() || ${{ needs.release-stable-setup.outputs.version }} == '0.0.0'
        env:
            VERSION: ${{ needs.release-stable-setup.outputs.version }}
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v5
              with:
                  ref: ${{ github.head_ref }}
                  fetch-depth: 0

            - name: Handle errors
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"

                  git push origin --delete v${{ env.VERSION }}
                  echo "deleted: v${{ env.VERSION }}"

            - name: Delete draft GitHub Release
              working-directory: .github/actions/delete-draft-release
              run: |
                  npm install
                  npm run build
                  npm start
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAG_NAME: v${{ env.VERSION }}
